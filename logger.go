/*=============================================================================
#     FileName: logext.go
#       Author: sunminghong, allen.fantasy@gmail.com, http://weibo.com/5d13
#         Team: http://1201.us
#   LastChange: 2013-12-15 11:14:56
#      History:
=============================================================================*/

/*
一个通用的、多输出、多级别的go 日志库，并且每个输出可以分别定义级别；可以方便自定义输出类
*/
package freelog

import (
	"bytes"
	"fmt"
	"strings"
	"runtime"
	"sync"
	"time"
)

// These flags define which text to prefix to each log entry generated by the Loggerext.
const (
	Ldate         = 1 << iota     // the date: 2009/0123
	Ltime                         // the time: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile

	Lmodule                       // module name
	LstdFlags     = Ldate | Ltime // initial values for the standard logger
	Ldefault      = Lmodule | Lshortfile | LstdFlags
) // [prefix][time][level][module][shortfile|longfile]

var reqId int

var levels = []string{
	"[All]",
	"[TRACE]",
	"[DEBUG]",
	"[INFO]",
	"[WARN]",
	"[ERROR]",
	"[PANIC]",
	"[FATAL]",
}

type iwriter interface {
    WriteLog(t *time.Time, level int, msg []byte)
}

// A Loggerext represents an active logging object that generates lines of
// output to an writer.  Each logging operation makes a single call to
// the Writer's Write method.  A Loggerext can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.
type Loggerext struct {
	mu     sync.Mutex   // ensures atomic writes; protects the following fields
	prefix string       // prefix to write at beginning of each line
	flag   int          // properties
	Level  int
	out    iwriter       // destination for output
	buf    *bytes.Buffer // for accumulating text to write
	levelStats [8]int64
}

// New creates a new Loggerext.   The out variable sets the
// destination to which log data will be written.
// The prefix appears at the beginning of each generated log line.
// The flag argument defines the logging properties.
func NewLoggerext(out iwriter, prefix string, flag int) *Loggerext {
	return &Loggerext{out: out, prefix: prefix, Level: 1, flag: flag}
}

func moduleOf(file string) string {
	pos := strings.LastIndex(file, "/")
	if pos != -1 {
		pos1 := strings.LastIndex(file[:pos], "/src/")
		if pos1 != -1 {
			return file[pos1+5:pos]
		}
	}
	return "UNKNOWN"
}

// Cheap integer to fixed-width decimal ASCII.  Give a negative width to avoid zero-padding.
// Knows the buffer has capacity.
func itoa(buf *bytes.Buffer, i int, wid int) {
	var u uint = uint(i)
	if u == 0 && wid <= 1 {
		buf.WriteByte('0')
		return
	}

	// Assemble decimal in reverse order.
	var b [32]byte
	bp := len(b)
	for ; u > 0 || wid > 0; u /= 10 {
		bp--
		wid--
		b[bp] = byte(u%10) + '0'
	}

	// avoid slicing b to avoid an allocation.
	for bp < len(b) {
		buf.WriteByte(b[bp])
		bp++
	}
}


func (l *Loggerext) formatHeader(t *time.Time, lvl int, reqId string) {
    buf := l.buf
	if l.prefix != "" {
		buf.WriteString(l.prefix)
	}
	if l.flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if l.flag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(buf, year, 4)
			buf.WriteByte('/')
			itoa(buf, int(month), 2)
			buf.WriteByte('/')
			itoa(buf, day, 2)
			buf.WriteByte(' ')
		}
		if l.flag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			buf.WriteByte(':')
			itoa(buf, min, 2)
			buf.WriteByte(':')
			itoa(buf, sec, 2)
			if l.flag&Lmicroseconds != 0 {
				buf.WriteByte('.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			buf.WriteByte(' ')
		}
	}
	if reqId != "" {
		buf.WriteByte('[')
		buf.WriteString(reqId)
		buf.WriteByte(']')
	}
    buf.WriteString(levels[lvl])
    buf.WriteByte('\n')

}

// Output writes the output for a logging event.  The string s contains
// the text to print after the prefix specified by the flags of the
// Loggerext.  A newline is appended if the last character of s is not
// already a newline.  Calldepth is used to recover the PC and is
// provided for generality, although at the moment on all pre-defined
// paths it will be 2.
func (l *Loggerext) Output(lvl int, calldepth int, s string) {
	now := time.Now() // get this early.
	l.mu.Lock()
	defer l.mu.Unlock()
    reqId++
    sreqId := fmt.Sprintf("LE%d",reqId)
	l.levelStats[lvl] ++
	l.buf.Reset()
	l.formatHeader(&now,lvl, sreqId)

	if lvl > levelWarn && (l.flag&(Lshortfile|Llongfile|Lmodule) != 0) {
		// release lock while getting caller info - it's expensive.
		l.mu.Unlock()
        buf := l.buf
        for i:=calldepth;i<calldepth+3;i++ {
            var ok bool
            pc, file, line, ok := runtime.Caller(calldepth)
            if ok {
                funname := runtime.FuncForPC(pc).Name()

                buf.WriteString("    ")
                if l.flag&Lmodule != 0 {
                    buf.WriteByte('[')
                    buf.WriteString(moduleOf(file))
                    buf.WriteString(funname)
                    buf.WriteByte(']')
                    buf.WriteByte(' ')
                }
                if l.flag&(Lshortfile|Llongfile) != 0 {
                    if l.flag&Lshortfile != 0 {
                        short := file
                        for i := len(file) - 1; i > 0; i-- {
                            if file[i] == '/' {
                                short = file[i+1:]
                                break
                            }
                        }
                        file = short
                    }
                    buf.WriteString(file)
                    buf.WriteByte(':')
                    itoa(buf, line, -1)
                    buf.WriteString("\n: ")
                }
            }
        }
		l.mu.Lock()
	}

	l.buf.WriteString(s)
	if len(s) > 0 && s[len(s)-1] != '\n' {
		l.buf.WriteByte('\n')
	}
	l.out.WriteLog(&now, lvl, l.buf.Bytes())
	return
}

func (l *Loggerext) Stat() (stats []int64) {
	l.mu.Lock()
	v := l.levelStats
	l.mu.Unlock()
	return v[:]
}

// Flags returns the output flags for the logger.
func (l *Loggerext) Flags() int {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.flag
}
// SetFlags sets the output flags for the logger.
func (l *Loggerext) SetFlags(flag int) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.flag = flag
}

// Prefix returns the output prefix for the logger.
func (l *Loggerext) Prefix() string {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.prefix
}

// SetPrefix sets the output prefix for the logger.
func (l *Loggerext) SetPrefix(prefix string) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.prefix = prefix
}

// SetOutputLevel sets the output level for the logger.
func (l *Loggerext) SetOutputLevel(lvl int) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.Level = lvl
}

/*
// -----------------------------------------

// Printf calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Printf.
func (l *Loggerext) Printf(format string, v ...interface{}) {
	l.Output(levelInfo, 2, fmt.Sprintf(format, v...))
}

// Print calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Print.
func (l *Loggerext) Print(v ...interface{}) {
    l.Output(levelInfo, 2, fmt.Sprint(v...))
}

// Println calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Println.
func (l *Loggerext) Println(v ...interface{}) {
    l.Output(levelInfo, 2, fmt.Sprintln(v...))
}

// -----------------------------------------

func (l *Loggerext) Debugf(format string, v ...interface{}) {
	l.Output(levelDebug, 2, fmt.Sprintf(format, v...))
}

func (l *Loggerext) Debug(v ...interface{}) {
	l.Output(levelDebug, 2, fmt.Sprintln(v...))
}

// -----------------------------------------

func (l *Loggerext) Infof(format string, v ...interface{}) {
	l.Output(levelInfo, 2, fmt.Sprintf(format, v...))
}

func (l *Loggerext) Info(v ...interface{}) {
	l.Output(levelInfo, 2, fmt.Sprintln(v...))
}

// -----------------------------------------

func (l *Loggerext) Warnf(format string, v ...interface{}) {
	l.Output(levelWarn, 2, fmt.Sprintf(format, v...))
}

func (l *Loggerext) Warn(v ...interface{}) {
    l.Output(levelWarn, 2, fmt.Sprintln(v...))
}

// -----------------------------------------

func (l *Loggerext) Errorf(format string, v ...interface{}) {
	l.Output(levelError, 2, fmt.Sprintf(format, v...))
}

func (l *Loggerext) Error(v ...interface{}) {
    l.Output(levelError, 2, fmt.Sprintln(v...))
}

// -----------------------------------------

func (l *Loggerext) Fatal(v ...interface{}) {
	l.Output(levelFatal, 2, fmt.Sprint(v...))
	os.Exit(1)
}

// Fatalf is equivalent to l.Printf() followed by a call to os.Exit(1).
func (l *Loggerext) Fatalf(format string, v ...interface{}) {
	l.Output(levelFatal, 2, fmt.Sprintf(format, v...))
	os.Exit(1)
}

// Fatalln is equivalent to l.Println() followed by a call to os.Exit(1).
func (l *Loggerext) Fatalln(v ...interface{}) {
	l.Output(levelFatal, 2, fmt.Sprintln(v...))
	os.Exit(1)
}

// -----------------------------------------

// Panic is equivalent to l.Print() followed by a call to panic().
func (l *Loggerext) Panic(v ...interface{}) {
	s := fmt.Sprint(v...)
	l.Output(levelPanic, 2, s)
	panic(s)
}

// Panicf is equivalent to l.Printf() followed by a call to panic().
func (l *Loggerext) Panicf(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	l.Output(levelPanic, 2, s)
	panic(s)
}

// Panicln is equivalent to l.Println() followed by a call to panic().
func (l *Loggerext) Panicln(v ...interface{}) {
	s := fmt.Sprintln(v...)
	l.Output(levelPanic, 2, s)
	panic(s)
}
*/

// -----------------------------------------
